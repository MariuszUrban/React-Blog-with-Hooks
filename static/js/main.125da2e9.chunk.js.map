{"version":3,"sources":["hooks/useTheme.js","hooks/useDispatch.js","hooks/usePostsState.js","hooks/useUserState.js","hooks/useDebouncedUndo.js","hooks/api.js","contexts.js","post/Post.js","post/PostList.js","pages/HomePage.js","post/CreatePost.js","user/Login.js","user/Register.js","user/UserBar.js","Header.js","ChangeTheme.js","pages/HeaderBar.js","pages/PostPage.js","pages/FooterBar.js","reducers.js","App.js","serviceWorker.js","index.js"],"names":["useTheme","useContext","ThemeContext","useDispatch","context","StateContext","dispatch","usePostsState","state","posts","useUserState","user","useDebouncedUndo","timeout","useState","content","setInput","useUndo","undoContent","setContent","set","undoRest","useDebouncedCallback","value","setDebounce","cancelDebounce","useEffect","present","useCallback","useAPILogin","useResource","username","password","url","encodeURI","method","useAPIRegister","data","useAPICreatePost","title","author","useAPIThemes","React","createContext","primaryColor","secondaryColor","Post","id","short","console","log","processedContent","length","substring","style","color","href","memo","prev","next","PostList","map","p","i","Fragment","HomePage","error","getPosts","type","reverse","CreatePost","useInput","bindTitle","bindToInput","undo","redo","canUndo","canRedo","post","createPost","navigation","useNavigation","navigate","onSubmit","e","preventDefault","htmlFor","name","onChange","target","onClick","disabled","Login","bindUsername","loginFailed","setLoginFailed","bindPassword","login","useLoginEffect","Register","passwordRepeat","bindPasswordRepeat","register","useRegisterEffect","Logout","lazy","UserBar","Header","text","ThemeItem","theme","active","cursor","paddingLeft","fontWeight","ChangeTheme","setTheme","themes","getThemes","isLoading","isActive","t","HeaderBar","mobilePhone","useWindowSize","innerWidth","Suspense","fallback","PostPage","getPost","FooterBar","useCurrentRoute","userReducer","action","postsReducer","errorReducer","appReducer","routes","mount","route","view","req","params","App","useReducer","document","Provider","padding","Boolean","window","location","hostname","match","axiosInstance","axios","create","baseURL","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.125da2e9.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { ThemeContext } from '../contexts'\n\nexport default function useTheme () {\n  return useContext(ThemeContext)\n}\n","import { useContext } from 'react'\nimport { StateContext } from '../contexts'\n\nexport default function useDispatch (context = StateContext) {\n  const { dispatch } = useContext(context)\n  return dispatch\n}\n","import { useContext } from 'react'\nimport { StateContext } from '../contexts'\n\nexport default function usePostsState () {\n  const { state } = useContext(StateContext)\n  return state.posts\n}\n","import { useContext } from 'react'\nimport { StateContext } from '../contexts'\n\nexport default function useUserState () {\n  const { state } = useContext(StateContext)\n  return state.user\n}\n","import { useState, useEffect, useCallback } from 'react'\nimport useUndo from 'use-undo'\nimport { useDebouncedCallback } from 'use-debounce'\n\nexport default function useDebouncedUndo (timeout = 200) {\n  const [ content, setInput ] = useState('')\n  const [ undoContent, { set: setContent, ...undoRest } ] = useUndo('')\n\n  const [ setDebounce, cancelDebounce ] = useDebouncedCallback(\n    (value) => {\n      setContent(value)\n    },\n    timeout\n  )\n  useEffect(() => {\n    cancelDebounce()\n    setInput(undoContent.present)\n  }, [cancelDebounce, undoContent])\n\n  const setter = useCallback(function setterFn (value) {\n    setInput(value)\n    setDebounce(value)\n  }, [ setInput, setDebounce ])\n\n  return [ content, setter, undoRest ]\n}\n","import { useResource } from 'react-request-hook'\n\nexport function useAPILogin () {\n  return useResource((username, password) => ({\n    url: `/login/${encodeURI(username)}/${encodeURI(password)}`,\n    method: 'get'\n  }))\n}\n\nexport function useAPIRegister () {\n  return useResource((username, password) => ({\n    url: '/users',\n    method: 'post',\n    data: { username, password }\n  }))\n}\n\nexport function useAPICreatePost () {\n  return useResource(({ title, content, author }) => ({\n    url: '/posts',\n    method: 'post',\n    data: { title, content, author }\n  }))\n}\n\nexport function useAPIThemes () {\n  return useResource(() => ({\n    url: '/themes',\n    method: 'get'\n  }))\n}\n","import React from 'react'\n\nexport const StateContext = React.createContext({\n  state: {},\n  dispatch: () => {}\n})\n\nexport const ThemeContext = React.createContext({\n  primaryColor: 'deepskyblue',\n  secondaryColor: 'coral'\n})\n","import React from 'react'\nimport { Link } from 'react-navi'\nimport { useTheme } from '../hooks'\n\nfunction Post ({ id, title, content, author, short = false }) {\n  console.log('rendering Post')\n  const { secondaryColor } = useTheme()\n\n  let processedContent = content\n  if (short) {\n    if (content.length > 30) {\n      processedContent = content.substring(0, 30) + '...'\n    }\n  }\n  \n  return (\n    <div>\n      <h3 style={{ color: secondaryColor }}>{title}</h3>\n      <div>{processedContent}</div>\n      {short &&\n        <div>\n          <br />\n          <Link href={`/view/${id}`}>View full post</Link>\n        </div>\n      }\n      <br />\n      <i>Written by <b>{author}</b></i>\n    </div>\n  )\n}\n\nexport default React.memo(Post,\n  (prev, next) => prev.title === next.title && prev.content === next.content && prev.author === next.author\n)\n","import React from 'react'\nimport { usePostsState } from '../hooks'\n\nimport Post from './Post'\n\nexport default function PostList () {\n  const posts = usePostsState()\n  \n  return (\n    <div>\n      {posts.map((p, i) => (\n        <React.Fragment key={i}>\n          <Post {...p} short={true} />\n          <hr />\n        </React.Fragment>\n      ))}\n    </div>\n  )\n}\n","import React, { useEffect, useContext } from 'react'\nimport { StateContext } from '../contexts'\nimport { useResource } from 'react-request-hook'\nimport PostList from '../post/PostList'\n\nexport default function HomePage () {\n    const { state, dispatch } = useContext(StateContext)\n    const { error } = state\n    \n    const [ posts, getPosts ] = useResource(() => ({\n        url: '/posts',\n        method: 'get'\n    }))\n    useEffect(getPosts, [])\n    useEffect(() => {\n        if (posts && posts.error) {\n            dispatch({ type: 'POSTS_ERROR' })\n        }\n        if (posts && posts.data) {\n            dispatch({ type: 'FETCH_POSTS', posts: posts.data.reverse() })\n        }\n    }, [dispatch, posts])\n\n    return (\n        <div>\n            {error && <b>{error}</b>}\n            <PostList />\n        </div>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useInput } from 'react-hookedup'\nimport { useNavigation } from 'react-navi'\nimport { useUserState, useDispatch, useDebouncedUndo, useAPICreatePost } from '../hooks'\n\nexport default function CreatePost () {\n  const user = useUserState()\n  const dispatch = useDispatch()\n\n  const { value: title, bindToInput: bindTitle } = useInput('')\n  const [ content, setContent, { undo, redo, canUndo, canRedo } ] = useDebouncedUndo()\n\n  const [ post, createPost ] = useAPICreatePost()\n\n  const navigation = useNavigation()\n\n  useEffect(() => {\n    if (post && post.data) {\n      dispatch({ type: 'CREATE_POST', ...post.data })\n      navigation.navigate(`/view/${post.data.id}`)\n    }\n  }, [dispatch, navigation, post])\n\n  function handleContent (e) {\n    const { value } = e.target\n    setContent(value)\n  }\n\n  function handleCreate () {\n    createPost({ title, content, author: user })\n  }\n\n  return (\n    <form onSubmit={e => { e.preventDefault(); handleCreate() }}>\n      <div>Author: <b>{user}</b></div>\n      <div>\n        <label htmlFor=\"create-title\">Title:</label>\n        <input type=\"text\" value={title} {...bindTitle} name=\"create-title\" id=\"create-title\" />\n      </div>\n      <textarea value={content} onChange={handleContent} />\n      <button type=\"button\" onClick={undo} disabled={!canUndo}>Undo</button>\n      <button type=\"button\" onClick={redo} disabled={!canRedo}>Redo</button>\n      <input type=\"submit\" value=\"Create\" />\n    </form>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { useInput } from 'react-hookedup'\nimport { useDispatch, useAPILogin } from '../hooks'\n\nfunction useLoginEffect (user, dispatch, setLoginFailed) {\n  return useEffect(() => {\n    if (user && user.data) {\n      if ( user.data.length > 0) {\n        setLoginFailed(false)\n        dispatch({ type: 'LOGIN', username: user.data[0].username })\n      } else {\n        setLoginFailed(true)\n      }\n    }\n    if (user && user.error) {\n      setLoginFailed(true)\n    }\n  }, [dispatch, user, setLoginFailed])\n}\n\nexport default function Login () {\n  const dispatch = useDispatch()\n  \n  const { value: username, bindToInput: bindUsername } = useInput('')\n  const [ loginFailed, setLoginFailed ] = useState(false)\n  const { value: password, bindToInput: bindPassword } = useInput('')\n\n  const [ user, login ] = useAPILogin()\n  useLoginEffect(user, dispatch, setLoginFailed)\n\n  return (\n    <form onSubmit={e => { e.preventDefault(); login(username, password) }}>\n      <label htmlFor=\"login-username\">Username:</label>\n      <input type=\"text\" value={username} {...bindUsername} name=\"login-username\" id=\"login-username\" />\n      <label htmlFor=\"login-password\">Password:</label>\n      <input type=\"password\" value={password} {...bindPassword} name=\"login-password\" id=\"login-password\" />\n      <input type=\"submit\" value=\"Login\" disabled={username.length === 0} />\n      {loginFailed && <span style={{ color: 'red' }}>Invalid username or password</span>}\n    </form>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useInput } from 'react-hookedup'\nimport { useDispatch, useAPIRegister } from '../hooks'\n\nfunction useRegisterEffect (user, dispatch) {\n    useEffect(() => {\n        if (user && user.data) {\n            dispatch({ type: 'REGISTER', username: user.data.username })\n        }\n    }, [dispatch, user])\n}\n\nexport default function Register () {\n    const dispatch = useDispatch()\n    \n    const { value: username, bindToInput: bindUsername } = useInput('')\n    const { value: password, bindToInput: bindPassword } = useInput('')\n    const { value: passwordRepeat, bindToInput: bindPasswordRepeat } = useInput('')\n\n    const [ user, register ] = useAPIRegister()\n    useRegisterEffect(user, dispatch)\n\n    return (\n        <form onSubmit={e => { e.preventDefault(); register(username, password) }}>\n            <label htmlFor=\"register-username\">Username:</label>\n            <input type=\"text\" value={username} {...bindUsername} name=\"register-username\" id=\"register-username\" />\n            <label htmlFor=\"register-password\">Password:</label>\n            <input type=\"password\" value={password} {...bindPassword} name=\"register-password\" id=\"register-password\" />\n            <label htmlFor=\"register-password-repeat\">Repeat password:</label>\n            <input type=\"password\" value={passwordRepeat} {...bindPasswordRepeat} name=\"register-password-repeat\" id=\"register-password-repeat\" />\n            <input type=\"submit\" value=\"Register\" disabled={username.length === 0 || password.length === 0 || password !== passwordRepeat} />\n        </form>\n    )\n}\n","import React from 'react'\nimport { useUserState } from '../hooks'\n\nimport Login from './Login'\nimport Register from './Register'\n\nconst Logout = React.lazy(() => import('./Logout'))\n\nexport default function UserBar () {\n  const user = useUserState()\n\n  if (user) {\n    return <Logout />\n  } else {\n    return (\n        <React.Fragment>\n            <Login />\n            <Register />\n        </React.Fragment>\n    )\n  }\n}\n","import React from 'react'\nimport { useTheme } from './hooks'\n\nconst Header = ({ text }) => {\n  const { primaryColor } = useTheme()\n  return <h1 style={{ color: primaryColor }}>{text}</h1>\n}\n\nexport default Header\n","import React, { useEffect } from 'react'\nimport { useAPIThemes } from './hooks'\n\nfunction ThemeItem ({ theme, active, onClick }) {\n  return (\n    <span onClick={onClick} style={{ cursor: 'pointer', paddingLeft: 8, fontWeight: active ? 'bold' : 'normal' }}>\n      <span style={{ color: theme.primaryColor }}>Primary</span> / <span style={{ color: theme.secondaryColor }}>Secondary</span>\n    </span>\n  )\n}\n\nexport default function ChangeTheme ({ theme, setTheme }) {\n  const [ themes, getThemes ] = useAPIThemes()\n  const { data, isLoading } = themes\n\n  useEffect(getThemes, [])\n\n  function isActive (t) {\n    return t.primaryColor === theme.primaryColor && t.secondaryColor === theme.secondaryColor\n  }\n\n  return (\n    <div>\n      Change theme:\n      {isLoading && ' Loading themes...'}\n      {data && data.map((t, i) =>\n        <ThemeItem key={'theme-' + i} theme={t} active={isActive(t)} onClick={() => setTheme(t)} />\n      )}\n    </div>\n  )\n}\n","import React, { useContext } from 'react'\nimport useWindowSize from '@rehooks/window-size'\n\nimport CreatePost from '../post/CreatePost'\nimport UserBar from '../user/UserBar'\nimport Header from '../Header'\nimport ChangeTheme from '../ChangeTheme'\nimport { ThemeContext, StateContext } from '../contexts'\n\nexport default function HeaderBar ({ setTheme }) {\n    const theme = useContext(ThemeContext)\n\n    const { state } = useContext(StateContext)\n    const { user } = state\n\n    const { innerWidth } = useWindowSize()\n    const mobilePhone = innerWidth < 640\n\n    return (\n        <div>\n            <Header text=\"React Hooks Blog\" />\n            {!mobilePhone && <ChangeTheme theme={theme} setTheme={setTheme} />}\n            {!mobilePhone && <br />}\n            {!mobilePhone && <React.Suspense fallback={\"Loading...\"}>\n                <UserBar />\n            </React.Suspense>}\n            {!mobilePhone && <br />}\n            {user && <CreatePost />}\n        </div>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useResource } from 'react-request-hook'\nimport { Link } from 'react-navi'\nimport Post from '../post/Post'\n\nexport default function PostPage ({ id }) {\n    const [ post, getPost ] = useResource(() => ({\n        url: `/posts/${id}`,\n        method: 'get'\n    }))\n    useEffect(getPost, [id])\n\n    return (\n        <div>\n            <div><Link href=\"/\">Go back</Link></div>\n            {(post && post.data)\n                ? <Post {...post.data} />\n                : 'Loading...'\n            }\n            <hr />\n        </div>\n    )\n}\n","import React from 'react'\nimport { useCurrentRoute } from 'react-navi'\n\nexport default function FooterBar () {\n    const { url } = useCurrentRoute()\n\n    return (\n        <div>\n            <a href={url.href}>{url.href}</a>\n        </div>\n    )\n}\n","function userReducer (state, action) {\n  switch (action.type) {\n      case 'LOGIN':\n      case 'REGISTER':\n          return action.username\n      \n      case 'LOGOUT':\n          return ''\n      \n      default:\n          return state\n  }\n}\n\nfunction postsReducer (state, action) {\n  switch (action.type) {\n      case 'FETCH_POSTS':\n          return action.posts\n\n      case 'CREATE_POST':\n          const newPost = { title: action.title, content: action.content, author: action.author, id: action.id }\n          return [ newPost, ...state ]\n      \n      default:\n          return state\n  }\n}\n\nfunction errorReducer (state, action) {\n  switch (action.type) {\n      case 'POSTS_ERROR':\n          return 'Failed to fetch posts'\n\n      default:\n          return state\n  }\n}\n\nexport default function appReducer (state, action) {\n  return {\n      user: userReducer(state.user, action),\n      posts: postsReducer(state.posts, action),\n      error: errorReducer(state.error, action)\n  }\n}\n","import React, { useReducer, useEffect, useState } from 'react'\nimport { Router, View } from 'react-navi'\nimport { mount, route } from 'navi'\n\nimport HomePage from './pages/HomePage'\nimport HeaderBar from './pages/HeaderBar'\nimport PostPage from './pages/PostPage'\nimport FooterBar from './pages/FooterBar'\nimport { ThemeContext, StateContext } from './contexts'\nimport appReducer from './reducers'\n\nconst routes = mount({\n    '/': route({ view: <HomePage /> }),\n    '/view/:id': route(req => {\n        return { view: <PostPage id={req.params.id} /> }\n    }),\n})\n\nexport default function App () {\n    const [ theme, setTheme ] = useState({\n        primaryColor: 'deepskyblue',\n        secondaryColor: 'coral'\n    })\n\n    const [ state, dispatch ] = useReducer(appReducer, { user: '', posts: [], error: '' })\n    const { user } = state\n\n    useEffect(() => {\n        if (user) {\n            document.title = `${user} - React Hooks Blog`\n        } else {\n            document.title = 'React Hooks Blog'\n        }\n    }, [user])\n\n    return (\n        <StateContext.Provider value={{ state, dispatch }}>\n            <ThemeContext.Provider value={theme}>\n                <Router routes={routes}>\n                    <div style={{ padding: 8 }}>\n                        <HeaderBar setTheme={setTheme} />\n                        <hr />\n                        <View />\n                        <FooterBar />\n                    </div>\n                </Router>\n            </ThemeContext.Provider>\n        </StateContext.Provider>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { RequestProvider } from 'react-request-hook'\nimport axios from 'axios'\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:3000/api/'\n})\n\nReactDOM.render(\n  <RequestProvider value={axiosInstance}>\n    <App />\n  </RequestProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}